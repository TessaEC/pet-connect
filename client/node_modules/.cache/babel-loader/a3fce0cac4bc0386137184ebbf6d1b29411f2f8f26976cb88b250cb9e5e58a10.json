{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tecar\\\\bootcamp\\\\pet-connect\\\\client\\\\src\\\\components\\\\Pet-card.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { PET } from \"../utils/queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PetCard(_ref) {\n  _s();\n  let {\n    petId,\n    petName,\n    type,\n    breed,\n    age,\n    sex,\n    furColor,\n    status\n  } = _ref;\n  const [isFlipped, setIsFlipped] = useState(false);\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PET, {\n    variables: {\n      id: petId\n    }\n  });\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n  const pet = data.pet; // Assuming the returned data has a 'pet' field with the pet information\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `pet-card ${isFlipped ? 'flipped' : ''}`,\n    onClick: handleClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: pet.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type: \", pet.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), pet.type === 'dog' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Breed: \", pet.breed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 33\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Age: \", pet.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sex: \", pet.sex]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Color: \", pet.furColor]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(PetCard, \"nlooCns3jzBMReRdnFABH5jq6FQ=\", false, function () {\n  return [useQuery];\n});\n_c = PetCard;\nvar _c;\n$RefreshReg$(_c, \"PetCard\");","map":{"version":3,"names":["React","useState","useQuery","PET","jsxDEV","_jsxDEV","PetCard","_ref","_s","petId","petName","type","breed","age","sex","furColor","status","isFlipped","setIsFlipped","handleClick","loading","error","data","GET_PET","variables","id","children","fileName","_jsxFileName","lineNumber","columnNumber","message","pet","className","onClick","name","_c","$RefreshReg$"],"sources":["C:/Users/tecar/bootcamp/pet-connect/client/src/components/Pet-card.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { PET } from \"../utils/queries\";\n\nexport default function PetCard({ petId, petName, type, breed, age, sex, furColor, status }) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n  const { loading, error, data } = useQuery(GET_PET, {\n    variables: { id: petId },\n  });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error.message}</p>;\n  }\n\n  const pet = data.pet; // Assuming the returned data has a 'pet' field with the pet information\n\n  return (\n    <div className={`pet-card ${isFlipped ? 'flipped' : ''}`} onClick={handleClick}>\n      <div className=\"card-front\">\n        <p>{status}</p>\n        {/* Add image here using pet.image or any other relevant field */}\n        <div className=\"card-back\">\n          <h3>{pet.name}</h3>\n          <p>Type: {pet.type}</p>\n          {pet.type === 'dog' ? <p>Breed: {pet.breed}</p> : null}\n          <p>Age: {pet.age}</p>\n          <p>Sex: {pet.sex}</p>\n          <p>Color: {pet.furColor}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}